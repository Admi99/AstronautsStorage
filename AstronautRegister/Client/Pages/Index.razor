@page "/"
@using AstronautRegister.Shared
@using AstronautRegister.Client.Components

@inject HttpClient Http

<PageTitle>Astronaut register</PageTitle>

<Modal @ref="Modal" OnDelete="@OnModalConfirmation"></Modal>

<Page>
    <Title Text="Add astronaut"></Title>
    <AstronautsEditForm Astronaut="@Astronaut" OnClick="@AddAstronaut"/>
    <AstronautsTable Astronauts="@_astronauts" OnClick="@DeleteAstronaut"/>
</Page>

@code{

    private Astronaut Astronaut { get; set; } = CreateAstronaut();

    private readonly List<Astronaut> _astronauts = new();

    private Modal Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _astronauts.Clear();
        var result = await Http.GetFromJsonAsync<IEnumerable<Astronaut>>("Astronaut");
        _astronauts.AddRange(result ?? Array.Empty<Astronaut>());
    }

    private static Astronaut CreateAstronaut()
        => new()
        {
            DateOfBirth = DateTimeOffset.Now
        };

    private async Task DeleteAstronaut(Astronaut astronaut)
    {
        Modal.Open(astronaut);
        StateHasChanged();
    }

    private async Task OnModalConfirmation(Astronaut astronaut)
    {
        _astronauts.Remove(astronaut);
        await Http.DeleteAsync($"Astronaut/del/{astronaut.Id}");
        StateHasChanged();
    }

    private async Task AddAstronaut()
    {
        _astronauts.Add(Astronaut);
        await Http.PostAsJsonAsync("Astronaut", Astronaut);
        Astronaut = CreateAstronaut();
        StateHasChanged();
    }
}